@page "/editor"
@rendermode InteractiveServer
@using DecisionTreeShared.Models
@using RulesEditor.Services
@inject DecisionTreeService TreeService

<PageTitle>Decision Tree Builder</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12 mb-3">
            <h1>Decision Tree Builder</h1>
            <p class="lead">Build your decision tree visually - no coding required</p>
        </div>
    </div>

    <div class="row">
        <!-- Tree Settings Panel -->
        <div class="col-md-3">
            <div class="card mb-3">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-gear"></i> Tree Settings</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Tree ID</label>
                        <input type="text" class="form-control" @bind="treeId" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Version</label>
                        <input type="text" class="form-control" @bind="treeVersion" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Start Node</label>
                        <select class="form-select" @bind="startNodeId">
                            <option value="">-- Select Start Node --</option>
                            @foreach (var node in nodes)
                            {
                                <option value="@node.Id">@node.Id</option>
                            }
                        </select>
                    </div>
                    <hr />
                    <div class="d-grid gap-2">
                        <button class="btn btn-success" @onclick="SaveTree">
                            <i class="bi bi-save"></i> Save Tree
                        </button>
                        <label class="btn btn-info">
                            <i class="bi bi-upload"></i> Load Tree
                            <InputFile OnChange="LoadFile" class="d-none" accept=".json" />
                        </label>
                        <button class="btn btn-warning" @onclick="NewTree">
                            <i class="bi bi-file-earmark-plus"></i> New Tree
                        </button>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger")" role="alert">
                    @statusMessage
                </div>
            }
        </div>

        <!-- Nodes List Panel -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-diagram-3"></i> Nodes</h5>
                    <button class="btn btn-sm btn-light" @onclick="AddNewNode">
                        <i class="bi bi-plus-circle"></i> Add Node
                    </button>
                </div>
                <div class="card-body" style="max-height: 600px; overflow-y: auto;">
                    @if (!nodes.Any())
                    {
                        <div class="text-center text-muted py-4">
                            <i class="bi bi-inbox" style="font-size: 3rem;"></i>
                            <p>No nodes yet. Click "Add Node" to get started.</p>
                        </div>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var node in nodes)
                            {
                                <a href="javascript:void(0)" 
                                   class="list-group-item list-group-item-action @(selectedNode == node ? "active" : "")"
                                   @onclick="() => SelectNode(node)">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <span class="badge bg-@GetNodeTypeBadge(node.Type) me-2">@node.Type</span>
                                            <strong>@node.Id</strong>
                                            @if (node.Id == startNodeId)
                                            {
                                                <span class="badge bg-success ms-2">START</span>
                                            }
                                            <br />
                                            <small class="text-muted">@GetNodeSummary(node)</small>
                                        </div>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteNode(node)" @onclick:stopPropagation="true">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </a>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Node Editor Panel -->
        <div class="col-md-5">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="bi bi-pencil"></i> Node Editor</h5>
                </div>
                <div class="card-body" style="max-height: 600px; overflow-y: auto;">
                    @if (selectedNode == null)
                    {
                        <div class="text-center text-muted py-5">
                            <i class="bi bi-cursor" style="font-size: 3rem;"></i>
                            <p>Select a node from the list to edit it</p>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label"><strong>Node ID</strong></label>
                            <input type="text" class="form-control" @bind="selectedNode.Id" @bind:event="oninput" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label"><strong>Node Type</strong></label>
                            <select class="form-select" @bind="selectedNode.Type" @bind:event="onchange">
                                <option value="End">End - Terminal node</option>
                                <option value="SingleChoice">Single Choice - Multiple options</option>
                                <option value="Number">Number - Numeric evaluation</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label"><strong>Prompt / Message</strong></label>
                            <textarea class="form-control" rows="3" @bind="selectedNode.Prompt" @bind:event="oninput"></textarea>
                            <small class="text-muted">The question or message for this node</small>
                        </div>

                        @if (selectedNode.Type == "SingleChoice")
                        {
                            <hr />
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <label class="form-label mb-0"><strong>Choices</strong></label>
                                    <button class="btn btn-sm btn-primary" @onclick="AddChoice">
                                        <i class="bi bi-plus"></i> Add Choice
                                    </button>
                                </div>
                                
                                @if (selectedNode.Choices == null || !selectedNode.Choices.Any())
                                {
                                    <p class="text-muted">No choices yet</p>
                                }
                                else
                                {
                                    @for (int i = 0; i < selectedNode.Choices.Count; i++)
                                    {
                                        var index = i;
                                        var choice = selectedNode.Choices[index];
                                        <div class="card mb-2">
                                            <div class="card-body p-2">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <small class="text-muted">Choice @(index + 1)</small>
                                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveChoice(index)">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </div>
                                                <input type="text" class="form-control form-control-sm mb-1" placeholder="Key (e.g., yes)" @bind="choice.Key" />
                                                <input type="text" class="form-control form-control-sm mb-1" placeholder="Label (e.g., Yes, I agree)" @bind="choice.Label" />
                                                <select class="form-select form-select-sm" @bind="choice.NextNodeId">
                                                    <option value="">-- Select Next Node --</option>
                                                    @foreach (var node in nodes)
                                                    {
                                                        <option value="@node.Id">@node.Id</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }

                        @if (selectedNode.Type == "Number")
                        {
                            <hr />
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <label class="form-label mb-0"><strong>Rules</strong></label>
                                    <button class="btn btn-sm btn-primary" @onclick="AddRule">
                                        <i class="bi bi-plus"></i> Add Rule
                                    </button>
                                </div>
                                
                                @if (selectedNode.Rules == null || !selectedNode.Rules.Any())
                                {
                                    <p class="text-muted">No rules yet</p>
                                }
                                else
                                {
                                    @for (int i = 0; i < selectedNode.Rules.Count; i++)
                                    {
                                        var index = i;
                                        var rule = selectedNode.Rules[index];
                                        <div class="card mb-2">
                                            <div class="card-body p-2">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <small class="text-muted">Rule @(index + 1)</small>
                                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveRule(index)">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </div>
                                                <select class="form-select form-select-sm mb-1" @bind="rule.Operator">
                                                    <option value="">-- Select Operator --</option>
                                                    <option value="LessThan">Less Than (&lt;)</option>
                                                    <option value="LessThanOrEqual">Less Than or Equal (&lt;=)</option>
                                                    <option value="GreaterThan">Greater Than (&gt;)</option>
                                                    <option value="GreaterOrEqual">Greater Than or Equal (&gt;=)</option>
                                                    <option value="Equal">Equal (=)</option>
                                                </select>
                                                <input type="number" class="form-control form-control-sm mb-1" placeholder="Value" @bind="rule.Value" />
                                                <select class="form-select form-select-sm" @bind="rule.NextNodeId">
                                                    <option value="">-- Select Next Node --</option>
                                                    @foreach (var node in nodes)
                                                    {
                                                        <option value="@node.Id">@node.Id</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }

                        @if (selectedNode.Type != "End")
                        {
                            <hr />
                            <div class="mb-3">
                                <label class="form-label"><strong>Default Next Node</strong></label>
                                <select class="form-select" @bind="selectedNode.DefaultNextNodeId">
                                    <option value="">-- None (optional) --</option>
                                    @foreach (var node in nodes)
                                    {
                                        <option value="@node.Id">@node.Id</option>
                                    }
                                </select>
                                <small class="text-muted">Used when no choice/rule matches</small>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string treeId = "my-decision-tree";
    private string treeVersion = "1.0.0";
    private string startNodeId = "";
    private List<DecisionNode> nodes = new();
    private DecisionNode? selectedNode = null;
    private string statusMessage = "";
    private bool isSuccess = false;

    protected override void OnInitialized()
    {
        // Start with a simple example
        LoadExampleTree();
    }

    private void LoadExampleTree()
    {
        treeId = "example-tree";
        treeVersion = "1.0.0";
        startNodeId = "start";
        
        nodes = new List<DecisionNode>
        {
            new DecisionNode
            {
                Id = "start",
                Type = "SingleChoice",
                Prompt = "How can we help you today?",
                Choices = new List<Choice>
                {
                    new Choice { Key = "question", Label = "I have a question", NextNodeId = "end_question" },
                    new Choice { Key = "issue", Label = "I have an issue", NextNodeId = "end_issue" }
                }
            },
            new DecisionNode
            {
                Id = "end_question",
                Type = "End",
                Prompt = "We'll connect you with someone who can answer your question."
            },
            new DecisionNode
            {
                Id = "end_issue",
                Type = "End",
                Prompt = "We'll help you resolve your issue."
            }
        };
    }

    private void AddNewNode()
    {
        var newNode = new DecisionNode
        {
            Id = $"node_{nodes.Count + 1}",
            Type = "End",
            Prompt = "Enter your prompt here"
        };
        nodes.Add(newNode);
        selectedNode = newNode;
    }

    private void SelectNode(DecisionNode node)
    {
        selectedNode = node;
    }

    private void DeleteNode(DecisionNode node)
    {
        nodes.Remove(node);
        if (selectedNode == node)
        {
            selectedNode = null;
        }
        if (startNodeId == node.Id)
        {
            startNodeId = "";
        }
    }

    private void AddChoice()
    {
        if (selectedNode != null)
        {
            selectedNode.Choices ??= new List<Choice>();
            selectedNode.Choices.Add(new Choice 
            { 
                Key = $"choice{selectedNode.Choices.Count + 1}",
                Label = "New Choice",
                NextNodeId = ""
            });
        }
    }

    private void RemoveChoice(int index)
    {
        if (selectedNode?.Choices != null && index < selectedNode.Choices.Count)
        {
            selectedNode.Choices.RemoveAt(index);
        }
    }

    private void AddRule()
    {
        if (selectedNode != null)
        {
            selectedNode.Rules ??= new List<Rule>();
            selectedNode.Rules.Add(new Rule 
            { 
                Operator = "LessThan",
                Value = "0",
                NextNodeId = ""
            });
        }
    }

    private void RemoveRule(int index)
    {
        if (selectedNode?.Rules != null && index < selectedNode.Rules.Count)
        {
            selectedNode.Rules.RemoveAt(index);
        }
    }

    private void NewTree()
    {
        treeId = "new-tree";
        treeVersion = "1.0.0";
        startNodeId = "";
        nodes.Clear();
        selectedNode = null;
        statusMessage = "";
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null) return;

            using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024);
            using var reader = new StreamReader(stream);
            var json = await reader.ReadToEndAsync();
            
            var result = TreeService.LoadFromJson(json);
            if (result.Success && result.Tree != null)
            {
                treeId = result.Tree.Id;
                treeVersion = result.Tree.Version;
                startNodeId = result.Tree.StartNodeId;
                nodes = result.Tree.Nodes.Values.ToList();
                selectedNode = null;
                statusMessage = "Tree loaded successfully!";
                isSuccess = true;
            }
            else
            {
                statusMessage = $"Error loading tree: {result.ErrorMessage}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading file: {ex.Message}";
            isSuccess = false;
        }
    }

    private void SaveTree()
    {
        try
        {
            var tree = new DecisionTree
            {
                Id = treeId,
                Version = treeVersion,
                StartNodeId = startNodeId,
                Nodes = nodes.ToDictionary(n => n.Id, n => n)
            };

            var json = TreeService.SerializeToJson(tree);
            var result = TreeService.LoadFromJson(json); // Validate
            
            if (result.Success)
            {
                var saveResult = TreeService.SaveToFile(tree, "rules.json");
                if (saveResult.Success)
                {
                    statusMessage = "✓ Tree saved successfully to rules.json!";
                    isSuccess = true;
                }
                else
                {
                    statusMessage = $"Error saving: {saveResult.ErrorMessage}";
                    isSuccess = false;
                }
            }
            else
            {
                statusMessage = $"Validation failed: {result.ErrorMessage}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            isSuccess = false;
        }
    }

    private string GetNodeTypeBadge(string type) => type switch
    {
        "End" => "danger",
        "SingleChoice" => "primary",
        "Number" => "warning",
        _ => "secondary"
    };

    private string GetNodeSummary(DecisionNode node)
    {
        if (node.Type == "End")
            return node.Prompt?.Length > 50 ? node.Prompt.Substring(0, 50) + "..." : node.Prompt ?? "";
        
        if (node.Type == "SingleChoice")
            return $"{node.Choices?.Count ?? 0} choices";
        
        if (node.Type == "Number")
            return $"{node.Rules?.Count ?? 0} rules";
        
        return "";
    }
}
