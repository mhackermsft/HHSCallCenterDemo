@page "/editor"
@rendermode InteractiveServer
@using DecisionTreeShared.Models
@using RulesEditor.Services
@inject DecisionTreeService TreeService

<PageTitle>Decision Tree Flow Builder</PageTitle>

<style>
    .flow-container {
        padding: 20px;
        background: #f8f9fa;
        min-height: calc(100vh - 100px);
        overflow-x: auto;
    }
    
    .flow-node {
        background: white;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 15px;
        margin: 20px auto;
        max-width: 600px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        position: relative;
    }
    
    .flow-node.start-node {
        border-color: #28a745;
        border-width: 3px;
    }
    
    .flow-node.end-node {
        border-color: #dc3545;
    }
    
    .flow-reference {
        background: #e9ecef !important;
        border: 2px dashed #6c757d !important;
        font-style: italic;
    }
    
    .flow-connector {
        width: 2px;
        height: 30px;
        background: #6c757d;
        margin: 0 auto;
    }
    
    .flow-branch-container {
        display: block;
        margin: 30px 0;
        padding-left: 40px;
        border-left: 3px solid #dee2e6;
    }
    
    .flow-branch {
        margin-bottom: 20px;
    }
    
    .branch-label {
        background: #0d6efd;
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        display: inline-block;
        font-size: 0.9rem;
        margin-bottom: 15px;
        font-weight: 500;
    }
    
    .node-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }
    
    .node-actions {
        display: flex;
        gap: 5px;
    }
    
    .add-node-button {
        text-align: center;
        padding: 20px;
        margin: 15px auto;
        max-width: 600px;
    }
    
    .edit-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
    }
    
    .edit-modal-content {
        background: white;
        border-radius: 8px;
        padding: 20px;
        max-width: 600px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
    }
</style>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3 p-3 bg-white border-bottom">
        <div>
            <h3 class="mb-0">Decision Tree Flow Builder</h3>
            <small class="text-muted">Follow the flow from top to bottom</small>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-success" @onclick="SaveTree">
                <i class="bi bi-save"></i> Save Tree
            </button>
            <label class="btn btn-info">
                <i class="bi bi-upload"></i> Load
                <InputFile OnChange="LoadFile" class="d-none" accept=".json" />
            </label>
            <button class="btn btn-secondary" @onclick="NewTree">
                <i class="bi bi-file-earmark-plus"></i> New
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mx-3" role="alert">
            @statusMessage
        </div>
    }

    <div class="flow-container">
        @if (string.IsNullOrEmpty(startNodeId) || !nodes.Any())
        {
            <div class="text-center py-5">
                <i class="bi bi-diagram-3" style="font-size: 4rem; color: #6c757d;"></i>
                <h4 class="mt-3">No Decision Tree Yet</h4>
                <p class="text-muted">Click "New Tree" or add your first node to get started</p>
                <button class="btn btn-primary btn-lg" @onclick="() => AddNodeAtPosition(null, null)">
                    <i class="bi bi-plus-circle"></i> Add First Node
                </button>
            </div>
        }
        else
        {
            @RenderNodeFlow(startNodeId, null)
        }
    </div>
</div>

@if (editingNode != null)
{
    <div class="edit-modal" @onclick="CloseEditModal">
        <div class="edit-modal-content" @onclick:stopPropagation="true">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="mb-0">Edit Node</h5>
                <button class="btn-close" @onclick="CloseEditModal"></button>
            </div>

            <div class="mb-3">
                <label class="form-label"><strong>Node ID</strong></label>
                <input type="text" class="form-control" @bind="editingNode.Id" />
            </div>

            <div class="mb-3">
                <label class="form-label"><strong>Node Type</strong></label>
                <select class="form-select" @bind="editingNode.Type">
                    <option value="End">End - Terminal node</option>
                    <option value="SingleChoice">Single Choice - Multiple options</option>
                    <option value="Number">Number - Numeric evaluation</option>
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label"><strong>Prompt / Message</strong></label>
                <textarea class="form-control" rows="3" @bind="editingNode.Prompt"></textarea>
            </div>

            @if (editingNode.Type == "SingleChoice")
            {
                <div class="mb-3">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <label class="form-label mb-0"><strong>Choices</strong></label>
                        <button class="btn btn-sm btn-primary" @onclick="AddChoice">
                            <i class="bi bi-plus"></i> Add Choice
                        </button>
                    </div>
                    
                    @if (editingNode.Choices != null && editingNode.Choices.Any())
                    {
                        @for (int i = 0; i < editingNode.Choices.Count; i++)
                        {
                            var index = i;
                            var choice = editingNode.Choices[index];
                            <div class="card mb-2">
                                <div class="card-body p-2">
                                    <div class="d-flex justify-content-between mb-2">
                                        <small class="text-muted">Choice @(index + 1)</small>
                                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveChoice(index)">
                                            <i class="bi bi-x"></i>
                                        </button>
                                    </div>
                                    <input type="text" class="form-control form-control-sm mb-1" placeholder="Key" @bind="choice.Key" />
                                    <input type="text" class="form-control form-control-sm mb-1" placeholder="Label" @bind="choice.Label" />
                                    <select class="form-select form-select-sm" @bind="choice.NextNodeId">
                                        <option value="">-- Select Next Node --</option>
                                        @foreach (var node in nodes.Where(n => n.Id != editingNode.Id))
                                        {
                                            <option value="@node.Id">@node.Id</option>
                                        }
                                        <option value="_new_">+ Create New Node</option>
                                    </select>
                                </div>
                            </div>
                        }
                    }
                </div>
            }

            @if (editingNode.Type == "Number")
            {
                <div class="mb-3">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <label class="form-label mb-0"><strong>Rules</strong></label>
                        <button class="btn btn-sm btn-primary" @onclick="AddRule">
                            <i class="bi bi-plus"></i> Add Rule
                        </button>
                    </div>
                    
                    @if (editingNode.Rules != null && editingNode.Rules.Any())
                    {
                        @for (int i = 0; i < editingNode.Rules.Count; i++)
                        {
                            var index = i;
                            var rule = editingNode.Rules[index];
                            <div class="card mb-2">
                                <div class="card-body p-2">
                                    <div class="d-flex justify-content-between mb-2">
                                        <small class="text-muted">Rule @(index + 1)</small>
                                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveRule(index)">
                                            <i class="bi bi-x"></i>
                                        </button>
                                    </div>
                                    <select class="form-select form-select-sm mb-1" @bind="rule.Operator">
                                        <option value="LessThan">Less Than (&lt;)</option>
                                        <option value="LessThanOrEqual">Less Than or Equal (&lt;=)</option>
                                        <option value="GreaterThan">Greater Than (&gt;)</option>
                                        <option value="GreaterOrEqual">Greater Than or Equal (&gt;=)</option>
                                        <option value="Equal">Equal (=)</option>
                                    </select>
                                    <input type="number" class="form-control form-control-sm mb-1" placeholder="Value" @bind="rule.Value" />
                                    <select class="form-select form-select-sm" @bind="rule.NextNodeId">
                                        <option value="">-- Select Next Node --</option>
                                        @foreach (var node in nodes.Where(n => n.Id != editingNode.Id))
                                        {
                                            <option value="@node.Id">@node.Id</option>
                                        }
                                        <option value="_new_">+ Create New Node</option>
                                    </select>
                                </div>
                            </div>
                        }
                    }
                </div>
            }

            <div class="d-flex gap-2 justify-content-end">
                <button class="btn btn-secondary" @onclick="CloseEditModal">Close</button>
                <button class="btn btn-primary" @onclick="SaveEditedNode">Save Changes</button>
            </div>
        </div>
    </div>
}

@code {
    private string treeId = "my-decision-tree";
    private string treeVersion = "1.0.0";
    private string startNodeId = "";
    private List<DecisionNode> nodes = new();
    private DecisionNode? editingNode = null;
    private string statusMessage = "";
    private bool isSuccess = false;
    private HashSet<string> renderedNodes = new();

    protected override void OnInitialized()
    {
        LoadExampleTree();
    }

    private RenderFragment RenderNodeFlow(string nodeId, string? parentBranchLabel) => builder =>
    {
        if (string.IsNullOrEmpty(nodeId))
            return;

        var node = nodes.FirstOrDefault(n => n.Id == nodeId);
        if (node == null)
            return;

        // If already rendered, show a reference link instead
        if (renderedNodes.Contains(nodeId))
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "flow-node flow-reference");
            builder.AddAttribute(2, "style", "text-align: center; padding: 10px; background: #e9ecef; border: 2px dashed #6c757d;");
            builder.OpenElement(3, "small");
            builder.AddContent(4, $"→ Continues at ");
            builder.OpenElement(5, "strong");
            builder.AddContent(6, nodeId);
            builder.CloseElement();
            builder.AddContent(7, " (see above)");
            builder.CloseElement();
            builder.CloseElement();
            return;
        }

        renderedNodes.Add(nodeId);

        // Render connector from parent
        if (parentBranchLabel != null)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "flow-connector");
            builder.CloseElement();
        }

        // Render the node
        builder.OpenElement(2, "div");
        builder.AddAttribute(3, "class", $"flow-node {(node.Id == startNodeId ? "start-node" : "")} {(node.Type == "End" ? "end-node" : "")}");
        
        // Node header
        builder.OpenElement(4, "div");
        builder.AddAttribute(5, "class", "node-header");
        
        builder.OpenElement(6, "div");
        builder.OpenElement(7, "span");
        builder.AddAttribute(8, "class", $"badge bg-{GetNodeTypeBadge(node.Type)} me-2");
        builder.AddContent(9, node.Type);
        builder.CloseElement();
        builder.OpenElement(10, "strong");
        builder.AddContent(11, node.Id);
        builder.CloseElement();
        if (node.Id == startNodeId)
        {
            builder.OpenElement(12, "span");
            builder.AddAttribute(13, "class", "badge bg-success ms-2");
            builder.AddContent(14, "START");
            builder.CloseElement();
        }
        builder.CloseElement();
        
        // Actions
        builder.OpenElement(15, "div");
        builder.AddAttribute(16, "class", "node-actions");
        builder.OpenElement(17, "button");
        builder.AddAttribute(18, "class", "btn btn-sm btn-primary");
        builder.AddAttribute(19, "onclick", EventCallback.Factory.Create(this, () => EditNode(node)));
        builder.OpenElement(20, "i");
        builder.AddAttribute(21, "class", "bi bi-pencil");
        builder.CloseElement();
        builder.CloseElement();
        builder.OpenElement(22, "button");
        builder.AddAttribute(23, "class", "btn btn-sm btn-danger");
        builder.AddAttribute(24, "onclick", EventCallback.Factory.Create(this, () => DeleteNode(node)));
        builder.OpenElement(25, "i");
        builder.AddAttribute(26, "class", "bi bi-trash");
        builder.CloseElement();
        builder.CloseElement();
        builder.CloseElement();
        
        builder.CloseElement(); // node-header
        
        // Node content
        builder.OpenElement(27, "div");
        builder.AddAttribute(28, "class", "mt-2");
        builder.AddContent(29, node.Prompt);
        builder.CloseElement();
        
        builder.CloseElement(); // flow-node

        // Handle branching for non-End nodes
        if (node.Type != "End")
        {
            var branches = GetNodeBranches(node);
            if (branches.Any())
            {
                builder.OpenElement(30, "div");
                builder.AddAttribute(31, "class", "flow-connector");
                builder.CloseElement();

                if (branches.Count > 1)
                {
                    builder.OpenElement(32, "div");
                    builder.AddAttribute(33, "class", "flow-branch-container");
                    
                    foreach (var branch in branches)
                    {
                        builder.OpenElement(34, "div");
                        builder.AddAttribute(35, "class", "flow-branch");
                        
                        builder.OpenElement(36, "div");
                        builder.AddAttribute(37, "class", "branch-label");
                        builder.AddContent(38, branch.Label);
                        builder.CloseElement();
                        
                        builder.AddContent(39, RenderNodeFlow(branch.NextNodeId, branch.Label));
                        
                        // Add button to add node in this branch
                        if (string.IsNullOrEmpty(branch.NextNodeId))
                        {
                            builder.OpenElement(40, "div");
                            builder.AddAttribute(41, "class", "add-node-button");
                            builder.OpenElement(42, "button");
                            builder.AddAttribute(43, "class", "btn btn-outline-primary");
                            builder.AddAttribute(44, "onclick", EventCallback.Factory.Create(this, () => AddNodeAtPosition(node.Id, branch.Label)));
                            builder.OpenElement(45, "i");
                            builder.AddAttribute(46, "class", "bi bi-plus-circle");
                            builder.CloseElement();
                            builder.AddContent(47, " Add Node Here");
                            builder.CloseElement();
                            builder.CloseElement();
                        }
                        
                        builder.CloseElement(); // flow-branch
                    }
                    
                    builder.CloseElement(); // flow-branch-container
                }
                else
                {
                    // Single path
                    var branch = branches.First();
                    builder.AddContent(48, RenderNodeFlow(branch.NextNodeId, null));
                    
                    if (string.IsNullOrEmpty(branch.NextNodeId))
                    {
                        builder.OpenElement(49, "div");
                        builder.AddAttribute(50, "class", "add-node-button");
                        builder.OpenElement(51, "button");
                        builder.AddAttribute(52, "class", "btn btn-outline-primary btn-lg");
                        builder.AddAttribute(53, "onclick", EventCallback.Factory.Create(this, () => AddNodeAtPosition(node.Id, null)));
                        builder.OpenElement(54, "i");
                        builder.AddAttribute(55, "class", "bi bi-plus-circle");
                        builder.CloseElement();
                        builder.AddContent(56, " Add Node Here");
                        builder.CloseElement();
                        builder.CloseElement();
                    }
                }
            }
            else
            {
                // No branches defined yet - offer to add
                builder.OpenElement(57, "div");
                builder.AddAttribute(58, "class", "add-node-button");
                builder.OpenElement(59, "button");
                builder.AddAttribute(60, "class", "btn btn-outline-primary btn-lg");
                builder.AddAttribute(61, "onclick", EventCallback.Factory.Create(this, () => AddNodeAtPosition(node.Id, null)));
                builder.OpenElement(62, "i");
                builder.AddAttribute(63, "class", "bi bi-plus-circle");
                builder.CloseElement();
                builder.AddContent(64, " Add Node Here");
                builder.CloseElement();
                builder.CloseElement();
            }
        }
    };

    private List<(string Label, string NextNodeId)> GetNodeBranches(DecisionNode node)
    {
        var branches = new List<(string Label, string NextNodeId)>();
        
        if (node.Type == "SingleChoice" && node.Choices != null)
        {
            foreach (var choice in node.Choices)
            {
                branches.Add((choice.Label, choice.NextNodeId ?? ""));
            }
        }
        else if (node.Type == "Number" && node.Rules != null)
        {
            foreach (var rule in node.Rules)
            {
                branches.Add(($"{rule.Operator} {rule.Value}", rule.NextNodeId ?? ""));
            }
        }
        
        return branches;
    }

    private void LoadExampleTree()
    {
        treeId = "essence-triage-demo";
        treeVersion = "1.0.0";
        startNodeId = "q_greeting";
        
        nodes = new List<DecisionNode>
        {
            new DecisionNode
            {
                Id = "q_greeting",
                Type = "SingleChoice",
                Prompt = "Welcome to Essence of Oregon support. What brings you here today?",
                Choices = new List<Choice>
                {
                    new Choice { Key = "cancel", Label = "I want to cancel my subscription", NextNodeId = "q_reason" },
                    new Choice { Key = "other", Label = "Something else", NextNodeId = "end_other" }
                }
            },
            new DecisionNode
            {
                Id = "q_reason",
                Type = "SingleChoice",
                Prompt = "What is the main reason for canceling?",
                Choices = new List<Choice>
                {
                    new Choice { Key = "affordability", Label = "It's too expensive", NextNodeId = "q_usage" },
                    new Choice { Key = "dont_like", Label = "I didn't like the product", NextNodeId = "end_cancelled" },
                    new Choice { Key = "other", Label = "Other reason", NextNodeId = "end_escalate" }
                }
            },
            new DecisionNode
            {
                Id = "q_usage",
                Type = "SingleChoice",
                Prompt = "Have you had a chance to use the product enough to see results?",
                Choices = new List<Choice>
                {
                    new Choice { Key = "yes", Label = "Yes", NextNodeId = "q_discount40" },
                    new Choice { Key = "no", Label = "Not really", NextNodeId = "q_extend_offer" }
                }
            },
            new DecisionNode
            {
                Id = "q_extend_offer",
                Type = "SingleChoice",
                Prompt = "We can extend your free trial by 15 days at no charge so you can evaluate further. Would you like to accept the extension?",
                Choices = new List<Choice>
                {
                    new Choice { Key = "accept", Label = "Yes, extend my free trial", NextNodeId = "end_extended" },
                    new Choice { Key = "decline", Label = "No, I'd still like to cancel", NextNodeId = "q_discount40" }
                }
            },
            new DecisionNode
            {
                Id = "q_discount40",
                Type = "SingleChoice",
                Prompt = "We can offer a lifetime 40% employee discount. Keep the subscription for $50.28/month (from $83.80)?",
                Choices = new List<Choice>
                {
                    new Choice { Key = "accept", Label = "Accept $50.28/month", NextNodeId = "end_keep40" },
                    new Choice { Key = "decline", Label = "Still can't afford it", NextNodeId = "q_affordable_price" }
                }
            },
            new DecisionNode
            {
                Id = "q_affordable_price",
                Type = "Number",
                Prompt = "What monthly price (USD) would make it affordable for you?",
                Rules = new List<Rule>
                {
                    new Rule { Operator = "LessThanOrEqual", Value = "20", NextNodeId = "end_supervisor_80" },
                    new Rule { Operator = "GreaterThan", Value = "20", NextNodeId = "end_cancelled" }
                }
            },
            new DecisionNode
            {
                Id = "end_extended",
                Type = "End",
                Prompt = "Your free trial has been extended by 15 days. Please evaluate and contact us before it ends if you still wish to cancel."
            },
            new DecisionNode
            {
                Id = "end_keep40",
                Type = "End",
                Prompt = "Great! Your subscription will continue at the 40% discounted rate of $50.28/month."
            },
            new DecisionNode
            {
                Id = "end_supervisor_80",
                Type = "End",
                Prompt = "Approved by supervisor: lifetime 80% discount. Your monthly price will be $16.76."
            },
            new DecisionNode
            {
                Id = "end_cancelled",
                Type = "End",
                Prompt = "Understood. Your subscription is canceled. Thank you for trying Essence of Oregon."
            },
            new DecisionNode
            {
                Id = "end_escalate",
                Type = "End",
                Prompt = "Thanks for the feedback. A specialist will review and follow up regarding your cancellation request."
            },
            new DecisionNode
            {
                Id = "end_other",
                Type = "End",
                Prompt = "Thanks for reaching out. Please contact support for assistance with non-cancellation inquiries."
            }
        };
        
        renderedNodes.Clear();
    }

    private void AddNodeAtPosition(string? parentNodeId, string? branchLabel)
    {
        var newNode = new DecisionNode
        {
            Id = $"node_{nodes.Count + 1}",
            Type = "End",
            Prompt = "Enter your prompt here"
        };
        nodes.Add(newNode);
        
        if (parentNodeId != null)
        {
            var parentNode = nodes.FirstOrDefault(n => n.Id == parentNodeId);
            if (parentNode != null)
            {
                if (parentNode.Type == "SingleChoice")
                {
                    var choice = parentNode.Choices?.FirstOrDefault(c => c.Label == branchLabel);
                    if (choice != null)
                    {
                        choice.NextNodeId = newNode.Id;
                    }
                }
                else if (parentNode.Type == "Number")
                {
                    var rule = parentNode.Rules?.FirstOrDefault(r => $"{r.Operator} {r.Value}" == branchLabel);
                    if (rule != null)
                    {
                        rule.NextNodeId = newNode.Id;
                    }
                }
            }
        }
        else if (string.IsNullOrEmpty(startNodeId))
        {
            startNodeId = newNode.Id;
        }
        
        editingNode = newNode;
        renderedNodes.Clear();
    }

    private void EditNode(DecisionNode node)
    {
        editingNode = node;
    }

    private void CloseEditModal()
    {
        editingNode = null;
        renderedNodes.Clear();
    }

    private void SaveEditedNode()
    {
        editingNode = null;
        renderedNodes.Clear();
    }

    private void DeleteNode(DecisionNode node)
    {
        nodes.Remove(node);
        if (startNodeId == node.Id)
        {
            startNodeId = nodes.Any() ? nodes.First().Id : "";
        }
        
        // Remove references to this node
        foreach (var n in nodes)
        {
            if (n.Choices != null)
            {
                foreach (var choice in n.Choices)
                {
                    if (choice.NextNodeId == node.Id)
                        choice.NextNodeId = "";
                }
            }
            if (n.Rules != null)
            {
                foreach (var rule in n.Rules)
                {
                    if (rule.NextNodeId == node.Id)
                        rule.NextNodeId = "";
                }
            }
        }
        
        renderedNodes.Clear();
    }

    private void AddChoice()
    {
        if (editingNode != null)
        {
            editingNode.Choices ??= new List<Choice>();
            editingNode.Choices.Add(new Choice 
            { 
                Key = $"choice{editingNode.Choices.Count + 1}",
                Label = "New Choice",
                NextNodeId = ""
            });
        }
    }

    private void RemoveChoice(int index)
    {
        if (editingNode?.Choices != null && index < editingNode.Choices.Count)
        {
            editingNode.Choices.RemoveAt(index);
        }
    }

    private void AddRule()
    {
        if (editingNode != null)
        {
            editingNode.Rules ??= new List<Rule>();
            editingNode.Rules.Add(new Rule 
            { 
                Operator = "LessThan",
                Value = "0",
                NextNodeId = ""
            });
        }
    }

    private void RemoveRule(int index)
    {
        if (editingNode?.Rules != null && index < editingNode.Rules.Count)
        {
            editingNode.Rules.RemoveAt(index);
        }
    }

    private void NewTree()
    {
        treeId = "new-tree";
        treeVersion = "1.0.0";
        startNodeId = "";
        nodes.Clear();
        editingNode = null;
        statusMessage = "";
        renderedNodes.Clear();
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null) return;

            using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024);
            using var reader = new StreamReader(stream);
            var json = await reader.ReadToEndAsync();
            
            var result = TreeService.LoadFromJson(json);
            if (result.Success && result.Tree != null)
            {
                treeId = result.Tree.Id;
                treeVersion = result.Tree.Version;
                startNodeId = result.Tree.StartNodeId;
                nodes = result.Tree.Nodes.Values.ToList();
                editingNode = null;
                statusMessage = "Tree loaded successfully!";
                isSuccess = true;
                renderedNodes.Clear();
            }
            else
            {
                statusMessage = $"Error loading tree: {result.ErrorMessage}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading file: {ex.Message}";
            isSuccess = false;
        }
    }

    private void SaveTree()
    {
        try
        {
            var tree = new DecisionTree
            {
                Id = treeId,
                Version = treeVersion,
                StartNodeId = startNodeId,
                Nodes = nodes.ToDictionary(n => n.Id, n => n)
            };

            var json = TreeService.SerializeToJson(tree);
            var result = TreeService.LoadFromJson(json);
            
            if (result.Success)
            {
                var saveResult = TreeService.SaveToFile(tree, "rules.json");
                if (saveResult.Success)
                {
                    statusMessage = "✓ Tree saved successfully to rules.json!";
                    isSuccess = true;
                }
                else
                {
                    statusMessage = $"Error saving: {saveResult.ErrorMessage}";
                    isSuccess = false;
                }
            }
            else
            {
                statusMessage = $"Validation failed: {result.ErrorMessage}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            isSuccess = false;
        }
    }

    private string GetNodeTypeBadge(string type) => type switch
    {
        "End" => "danger",
        "SingleChoice" => "primary",
        "Number" => "warning",
        _ => "secondary"
    };
}
